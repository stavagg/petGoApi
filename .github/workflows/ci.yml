name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  DOCKER_IMAGE: petgoapi

jobs:
  # Этап 1: Тестирование и проверка качества
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: mydb
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 🔧 Install dependencies
      run: go mod download

    - name: ✅ Verify dependencies
      run: go mod verify

    - name: 🔍 Run go vet
      run: go vet ./...

    - name: 🎯 Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: 🚀 Run tests
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: password
        DB_NAME: mydb

    - name: 📊 Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "✅ Test coverage: $COVERAGE%"

    - name: 🎯 Check coverage threshold
      run: |
        if (( $(echo "$COVERAGE < 20" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum threshold (20%)"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum requirements"
        fi

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: 💾 Upload coverage artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.html
          coverage.out

  # Этап 2: Сборка и проверка Docker образа
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker image
      run: |
        docker run --name test-container -d -p 8080:8080 ${{ env.DOCKER_IMAGE }}:latest
        sleep 10
        
        # Проверяем, что контейнер запустился
        if [ "$(docker ps -q -f name=test-container)" ]; then
          echo "✅ Docker container started successfully"
          docker logs test-container
          docker stop test-container
          docker rm test-container
        else
          echo "❌ Docker container failed to start"
          docker logs test-container
          exit 1
        fi

  # Этап 3: Анализ безопасности (опционально)
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🔍 Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

  # Этап 4: Деплой (только для main ветки)
  deploy:
    name: 🚀 Deploy to Registry
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: 🏷️ Generate tags
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🚀 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📝 Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags:
